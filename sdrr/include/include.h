// Main header file

// Copyright (C) 2025 Piers Finlayson <piers@piers.rocks>
//
// MIT License

#ifndef SDRR_INCLUDE_H
#define SDRR_INCLUDE_H

#include <stdint.h>
#include <string.h>
#include "SEGGER_RTT.h"

// If you are not using sdrr-gen, you must define configuration options
// manually.  Exmaples are given here:
//
// #define STM32F1 1
// #define STM32F4 1
// #define HW_REV_A 1
// #define HW_REV_B 1
// #define HW_REV_C 1
// #define HW_REV_D 1
// #define HW_REV_E 1
// #define STM_VARIANT "F103R8"
// #define STM_FLASH_SIZE 65536
// #define ROM_IMAGE_SIZE 8192
// #define HSI 1    // Use HSI (internal oscillator)
// #define HSE 1    // Use HSE (external oscillator) instead of HSI
// #define CS1_ACTIVE_LOW 1  // Sets CS1 active direction - all ROM types
// #define CS2_ACTIVE_LOW 1  // 2316 only
// #define CS3_ACTIVE_LOW 1  // 2316 and 2332
// #define SWD 1  // Enable SWD (Serial Wire Debug) mode
// #define MCO 1  // Enable MCO (microcontroller clock output) on PA8
// #define MCO2 1 // Enable MCO2 (microcontroller clock output) on PC9
// #define BOOT_LOGGING 1  // Enable boot logging
// #define MAIN_LOOP_LOGGING 1  // Enable main loop logging
// #define DEBUG_LOGGING 1  // Enable more verbose logging
// #define STATUS_LED 1  // Enable status LED, HW rev e onwards
// #define OVERCLOCK 1  // Enable overclocking (may damage the part)
//
// sdrr-gen also provides the rom images:
//
// #define SDRR_NUM_IMAGES 1
// const uint8_t sdrr_rom_data[SDRR_NUM_IMAGES][ROM_IMAGE_SIZE] = { ... };

//
// Other supported #defines.
//
// These are provided for testing purposes only as they interefere with the
// normal operation of SDRR and should not be used for production.

//#define TIMER_TEST  5     // Instead of the regular main loop, run a timer
//                          // test, which will log every N seconds.
//#define TOGGLE_PA4  1     // Toggle PA4 as main loop
//#define EXECUTE_FROM_RAM  1   // Whether to execute main loop from RAM (flash
//                              // is the default).  RAM takes nearly twice as
//                              // long to execute, which may seem counter-
//                              // intuitive, but is due to contention on the
//                              // bus used by RAM (and GPIO access).  Flash,
//                              // while it includes wait states, is
//                              // prefetched.
//#define NO_BOOTLOADER  1  // Disables the device entering bootloader mode
//                          // when all three select jumpers are closed.  This
//                          // prevents the device from being easily upgraded
//                          // when running non-SWD enabled firmware, and is
//                          // not recommended.  However, it does enable an 8th
//                          // ROM image to be selected instead.
//#define PRELOAD_TO_RAM 1  // Preloads ROM image to RAM before serving it.
//                          // The alternative is to serve it directly from
//                          // flash.  There seems to be little point in 
//                          // disabling the preload - it saves a fraction of
//                          // a millisecond.
#define USE_PLL 1           // Default, do not change.  This enables the PLL
                            // (Phase Locked Loop) to increase the clock speed
                            // well beyond the HSI frequency.  Specific target
                            // frequencies are defined below.

// Include the autogenerated SDRR configuration header file.  This must be
// generated by sdrr-gen before building SDRR.  It is included before the other
// headers as it influences them.
#include "sdrr_config.h"
#include "roms.h"

// Include the standard SDRR header files 
#include "constants.h"
#include "registers.h"
#include "functions.h"

//
// Definition consistency checking
//
#if defined(HSI) && defined(HSE)
#error "HSI and HSE are mutually exclusive"
#endif // HSE/HSI

#if !defined(HSI) && !defined(HSE)
#error "Either HSI or HSE must be defined"
#endif // HSI/HSE

#if defined(TIMER_TEST) && defined(TOGGLE_PA4)
#error "TIMER_TEST and EXECUTE_FROM_RAM are mutually exclusive"
#endif // TIMER_TEST/TOGGLE_PA4

#if ((ROM_IMAGE_SIZE * SDRR_NUM_IMAGES) + (16 * 1024)) > STM_FLASH_SIZE
// Reserving 16KB for SDRR code size
// The linker would throw an error if the image size is too large, but this is
// from graceful.
#error "ROM image size too large for flash"
#endif // ROM image size check

#if defined(TIMER_TEST) && defined(TOGGLE_PA4)
#error "TIMER_TEST and TOGGLE_PA4 are mutually exclusive"
#endif // TIMER_TEST/TOGGLE_PA4

#if defined(HW_REV_D) && defined(STATUS_LED)
#error "HW_REV_D does not support a status LED"
#endif // HW_REV_D/STATUS_LED

#if defined(MAIN_LOOP_LOGGING) && !defined(BOOT_LOGGING)
#error "MAIN_LOOP_LOGGING requires BOOT_LOGGING to be defined"
#endif // MAIN_LOOP_LOGGING/BOOT_LOGGING

#if defined(DEBUG_LOGGING) && !defined(BOOT_LOGGING)
#error "DEBUG_LOGGING requires BOOT_LOGGING to be defined"
#endif // DEBUG_LOGGING/BOOT_LOGGING

//
// Set up clocking configuration for the internal and external oscillators
//
#if defined(STM32F1)
#if defined(HSI)
#define HSI_TRIM  0x1F  // Trim value for HSI - the maximum, not honoured
                        // on FCM32 devices
#define HSI_PLL   16    // PLL multiplier for HSI = 64Mhz (68.8Mhz with max
                        // trim)
#define TARGET_FREQ_MHZ  64
#elif defined(HSE)
#define HSE_PLL  9      // PLL multiplier for HSE = 72MHz with 8MHz oscillator
#define TARGET_FREQ_MHZ  72
#endif // HSI/HSE
#elif defined(STM32F4)

// PLL configuration for STM32F4 is auto-generated by sdrr-gen.  Check the
// target frequency is valid.
#if !defined(OVERCLOCK)
#if defined(STM32F401)
#if TARGET_FREQ_MHZ > 84
#error "Target frequency for STM32F401 must be 84MHz or less"
#endif // TARGET_FREQ_MHZ > 84
#elif defined(STM32F411)
#if TARGET_FREQ_MHZ > 100
#error "Target frequency for STM32F411 must be 100MHz or less"
#endif // TARGET_FREQ_MHZ > 100
#elif defined(STM32F405)
#if TARGET_FREQ_MHZ > 168
#error "Target frequency for STM32F405 must be 168MHz or less"
#endif // TARGET_FREQ_MHZ > 168
#elif defined(STM32F446)
#if TARGET_FREQ_MHZ > 180
#error "Target frequency for STM32F446 must be 180MHz or less"
#endif // TARGET_FREQ_MHZ > 180
#endif // STM32F4xx
#endif // !OVERCLOCK

#endif // STM32F1/4

//
// Set up debug logging
//
#if defined(BOOT_LOGGING)
#define LOG_INIT()   log_init()
#define LOG(X, ...)  do_log(X, ##__VA_ARGS__)
#else // BOOT_LOGGING
#define LOG_INIT()   void(0)
#define LOG(X, ...)  
#endif // BOOT_LOGGING
#if defined(DEBUG_LOGGING)
#define DEBUG(X, ...)  do_log(X, ##__VA_ARGS__)
#else // DEBUG_LOGGING
#define DEBUG(X, ...)
#endif // DEBUG_LOGGING

#if !defined(NO_BOOTLOADER)
// PB0-2 and PB7 are used as SEL pins.
#if defined(HW_REV_D)
#define BOOTLOADER_SEL_MASK  0b00000111
#else // HW_REV_E
#define BOOTLOADER_SEL_MASK  0b10000111
#endif // HW_REV_D
#define BOOTLOADER_SEL_2BIT_MASK  0b1100000000111111
#define BOOTLOADER_SEL_PD_MASK 0b1000000000101010
#endif // !NO_BOOTLOADER

#endif // SDRR_INCLUDE_H
